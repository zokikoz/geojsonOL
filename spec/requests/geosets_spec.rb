require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/geosets", type: :request do
  # Geoset. As you add validations to Geoset, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { geojson: '{"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[103.0078125,50.84757295365389],[111.26953125,50.84757295365389],[111.26953125,56.072035471800866],[103.0078125,56.072035471800866],[103.0078125,50.84757295365389]]]}}]}' } }

  let(:invalid_attributes) { { geojson: nil } }

  describe "GET /index" do
    it "renders a successful response" do
      Geoset.create! valid_attributes
      get geosets_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      geoset = Geoset.create! valid_attributes
      get geoset_url(geoset)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_geoset_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      geoset = Geoset.create! valid_attributes
      get edit_geoset_url(geoset)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Geoset" do
        expect {
          post geosets_url, params: { geoset: valid_attributes }
        }.to change(Geoset, :count).by(1)
      end

      it "redirects to the created geoset" do
        post geosets_url, params: { geoset: valid_attributes }
        expect(response).to redirect_to(geoset_url(Geoset.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Geoset" do
        expect {
          post geosets_url, params: { geoset: invalid_attributes }
        }.to change(Geoset, :count).by(0)
      end

      it "renders a response with 422 status - unporcessable entity" do
        post geosets_url, params: { geoset: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { geojson: '{"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[102.10693359375,56.559482483762245],[101.865234375,51.20688339486559],[110.32470703125,51.20688339486559],[110.36865234374999,56.559482483762245],[102.10693359375,56.559482483762245]]]}}]}' } }

      it "updates the requested geoset" do
        geoset = Geoset.create! valid_attributes
        patch geoset_url(geoset), params: { geoset: new_attributes }
        geoset.reload
      end

      it "redirects to the geoset" do
        geoset = Geoset.create! valid_attributes
        patch geoset_url(geoset), params: { geoset: new_attributes }
        geoset.reload
        expect(response).to redirect_to(geoset_url(geoset))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status - unporcessable entity" do
        geoset = Geoset.create! valid_attributes
        patch geoset_url(geoset), params: { geoset: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested geoset" do
      geoset = Geoset.create! valid_attributes
      expect {
        delete geoset_url(geoset)
      }.to change(Geoset, :count).by(-1)
    end

    it "redirects to the geosets list" do
      geoset = Geoset.create! valid_attributes
      delete geoset_url(geoset)
      expect(response).to redirect_to(geosets_url)
    end
  end
end
